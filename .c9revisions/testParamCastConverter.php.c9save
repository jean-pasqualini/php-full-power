{"ts":1380927982333,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\nnamespace fullPhp;\nuse \\AopJoinPoint;\nuse \\ReflectionClass;\nuse \\ReflectionParameter;\n\nclass paramConverter {\n\tpublic static function resolveParameter($refParam)\n\t{\n\t\t$export = ReflectionParameter::export(\n\t\t   array(\n\t\t      $refParam->getDeclaringClass()->name, \n\t\t      $refParam->getDeclaringFunction()->name\n\t\t   ), \n\t\t   $refParam->name, \n\t\t   true\n\t\t);\n\n\t\t$type = preg_replace('/.*?([A-Za-z\\\\\\\\]+)\\s+\\$'.$refParam->name.'.*/', '\\\\1', $export);\n\t\n\t\treturn $type;\n\t}\n\n\tpublic static function convert(AopJoinPoint $joinPoint)\n\t{\n\t\t$arguments = $joinPoint->getArguments();\n\n\t\t//echo \"//\".$joinPoint->getClassName().\"//\";\n\n\t\t$class = new ReflectionClass($joinPoint->getClassName());\n\n\t\t$methode = $class->getMethod($joinPoint->getMethodName());\n\n\t\tforeach($methode->getParameters() as $key => $parameter)\n\t\t{\n\t\t\t$type = paramConverter::resolveParameter($parameter);\n\n\t\t\t$classTypeParameter = new ReflectionClass($type);\n\n\t\t\tif($classTypeParameter->implementsInterface(\"\\\\fullPhp\\\\Cast\"))\n\t\t\t{\n\t\t\t\t$arguments[$key] = $classTypeParameter->getMethod(\"fromCast\")->invoke(null, $arguments[$key]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!isset($arguments[$key]))\n\t\t\t\t{\n\t\t\t\t\t$arguments[$key] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$joinPoint->setArguments($arguments);\n\t}\n}\n\n\ninterface Cast \n{\n\tpublic static function fromCast($element);\n\n\tpublic function toCast($element);\n}\n\n\nclass arrayCast extends \\ArrayObject implements Cast {\n\n\tpublic static function fromCast($element)\n\t{\n\t\treturn new arrayCast((array) $element);\n\t}\n\n\tpublic function toCast($element)\n\t{\n\t}\n\n\tpublic function __invoke()\n\t{\n\t\treturn $this->getArrayCopy();\n\t}\n}\n\n// Hack for paramConverter\naop_add_before('fullPhp\\\\*->*()', function(AopJoinPoint $joinPoint) { \\fullPhp\\paramConverter::convert($joinPoint); });\n\nclass etsi\n{\n\tpublic function tuFait(arrayCast $tableau)\n\t{\n\t\techo implode(\",\", $tableau());\n\t}\n}\n\n$non = new etsi();\n$non->tuFait(\"sdqd\");\n\n?>\n"]],"start1":0,"start2":0,"length1":0,"length2":1902}]],"length":1902}
